import api from './api';

/**
 * Servi√ßo de estoque - integra√ß√£o com API de Produtos
 *
 * Este servi√ßo gerencia o estoque do distribuidor usando o endpoint /api/Produtos
 * como backend, j√° que n√£o existe um endpoint /api/Estoque espec√≠fico.
 */

/**
 * Busca o estoque do distribuidor
 * @param {number|string} idDistribuidor - ID do distribuidor (opcional, usa localStorage se n√£o fornecido)
 * @returns {Promise<Array>} Lista de produtos no estoque
 * @throws {Error} Se houver erro na requisi√ß√£o
 */
export const getEstoqueDoDistribuidor = async (idDistribuidor = null) => {
  try {
    const token = localStorage.getItem('token');
    const id = idDistribuidor || localStorage.getItem('idPessoa');

    if (!token) {
      throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.');
    }

    console.log('üì¶ Buscando estoque do distribuidor:', id);

    const response = await api.get('/api/Produtos', {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log('‚úÖ Produtos recebidos da API:', response.data.length);

    // Mapeia produtos para formato de estoque esperado pela TelaEstoque
    const estoque = response.data.map(produto => ({
      id: produto.id,
      nome: produto.nome || 'Sem nome',
      descricao: produto.descricao || '',
      marca: produto.marca || 'Sem marca',
      quantidade: produto.quantidade || 0,
      valorUnitario: produto.precoVenda || 0,
      localFisico: produto.localizacao || '-',
      lote: produto.lote || '-',
      status: calcularStatus(produto.quantidade),
      // Campos adicionais que podem ser √∫teis
      categoria: produto.categoria || '',
      fornecedor: produto.fornecedor || produto.distribuidor || '',
      sku: produto.sku || '',
      ean: produto.ean || ''
    }));

    console.log('üìä Estoque formatado:', estoque.length, 'itens');

    return estoque;
  } catch (error) {
    console.error('‚ùå Erro ao buscar estoque:', error);

    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Dados:', error.response.data);
    }

    throw error;
  }
};

/**
 * Cria um novo produto no estoque
 * @param {Object} produto - Dados do produto
 * @param {string} produto.nome - Nome do produto
 * @param {string} produto.descricao - Descri√ß√£o do produto
 * @param {string} produto.marca - Marca do produto
 * @param {number} produto.quantidade - Quantidade em estoque
 * @param {number} produto.valorUnitario - Pre√ßo unit√°rio
 * @param {string} produto.localFisico - Localiza√ß√£o f√≠sica no estoque
 * @param {string} produto.lote - N√∫mero do lote
 * @returns {Promise<Object>} Produto criado
 * @throws {Error} Se os dados forem inv√°lidos ou houver erro na cria√ß√£o
 */
export const createProdutoEstoque = async (produto) => {
  try {
    const token = localStorage.getItem('token');

    if (!token) {
      throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.');
    }

    // Valida dados b√°sicos
    if (!produto.nome || produto.nome.trim() === '') {
      throw new Error('Nome do produto √© obrigat√≥rio');
    }

    if (!produto.quantidade || produto.quantidade < 0) {
      throw new Error('Quantidade deve ser maior ou igual a zero');
    }

    if (!produto.valorUnitario || produto.valorUnitario <= 0) {
      throw new Error('Valor unit√°rio deve ser maior que zero');
    }

    // Mapeia para formato esperado pela API de Produtos
    const payload = {
      nome: produto.nome,
      descricao: produto.descricao || '',
      marca: produto.marca || '',
      quantidade: produto.quantidade,
      precoVenda: produto.valorUnitario,
      localizacao: produto.localFisico || '',
      lote: produto.lote || '',
      categoria: produto.categoria || '',
      fornecedor: produto.fornecedor || '',
      sku: produto.sku || '',
      ean: produto.ean || '',
      // Campos adicionais que o backend pode esperar
      empresa: 1, // TODO: Buscar do contexto/usu√°rio
      estabelecimento: 1 // TODO: Buscar do contexto/usu√°rio
    };

    console.log('üì¶ Criando novo produto no estoque:', payload);

    const response = await api.post('/api/Produtos', payload, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Produto criado com sucesso:', response.data);

    // Retorna no formato de estoque
    return {
      id: response.data.id,
      nome: response.data.nome,
      descricao: response.data.descricao || '',
      marca: response.data.marca || '',
      quantidade: response.data.quantidade || 0,
      valorUnitario: response.data.precoVenda || 0,
      localFisico: response.data.localizacao || '-',
      lote: response.data.lote || '-',
      status: calcularStatus(response.data.quantidade)
    };
  } catch (error) {
    console.error('‚ùå Erro ao criar produto:', error);

    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Dados:', error.response.data);

      if (error.response.status === 400) {
        throw new Error('Dados inv√°lidos. Verifique os campos obrigat√≥rios.');
      }
    }

    throw error;
  }
};

/**
 * Atualiza um produto do estoque
 * @param {number} id - ID do produto
 * @param {Object} produto - Dados atualizados do produto
 * @returns {Promise<Object>} Produto atualizado
 * @throws {Error} Se o produto n√£o for encontrado ou houver erro na atualiza√ß√£o
 */
export const updateProdutoEstoque = async (id, produto) => {
  try {
    const token = localStorage.getItem('token');

    if (!token) {
      throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.');
    }

    // Mapeia para formato esperado pela API de Produtos
    const payload = {
      id: id,
      nome: produto.nome,
      descricao: produto.descricao || '',
      marca: produto.marca || '',
      quantidade: produto.quantidade,
      precoVenda: produto.valorUnitario,
      localizacao: produto.localFisico || '',
      lote: produto.lote || '',
      categoria: produto.categoria || '',
      fornecedor: produto.fornecedor || '',
      sku: produto.sku || '',
      ean: produto.ean || ''
    };

    console.log('üìù Atualizando produto:', id, payload);

    const response = await api.put(`/api/Produtos/${id}`, payload, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Produto atualizado com sucesso:', response.data);

    // Retorna no formato de estoque
    return {
      id: response.data.id,
      nome: response.data.nome,
      descricao: response.data.descricao || '',
      marca: response.data.marca || '',
      quantidade: response.data.quantidade || 0,
      valorUnitario: response.data.precoVenda || 0,
      localFisico: response.data.localizacao || '-',
      lote: response.data.lote || '-',
      status: calcularStatus(response.data.quantidade)
    };
  } catch (error) {
    console.error(`‚ùå Erro ao atualizar produto ${id}:`, error);

    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Dados:', error.response.data);

      if (error.response.status === 404) {
        throw new Error('Produto n√£o encontrado.');
      } else if (error.response.status === 400) {
        throw new Error('Dados inv√°lidos. Verifique os campos obrigat√≥rios.');
      }
    }

    throw error;
  }
};

/**
 * Exclui um produto do estoque
 * @param {number} id - ID do produto a ser exclu√≠do
 * @returns {Promise<Object>} Confirma√ß√£o de exclus√£o
 * @throws {Error} Se o produto n√£o for encontrado ou houver erro na exclus√£o
 */
export const deleteProdutoEstoque = async (id) => {
  try {
    const token = localStorage.getItem('token');

    if (!token) {
      throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.');
    }

    console.log('üóëÔ∏è Excluindo produto:', id);

    await api.delete(`/api/Produtos/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log('‚úÖ Produto exclu√≠do com sucesso:', id);

    return { success: true, message: 'Produto exclu√≠do com sucesso' };
  } catch (error) {
    console.error(`‚ùå Erro ao excluir produto ${id}:`, error);

    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Dados:', error.response.data);

      if (error.response.status === 404) {
        throw new Error('Produto n√£o encontrado.');
      } else if (error.response.status === 400) {
        throw new Error('N√£o √© poss√≠vel excluir este produto.');
      }
    }

    throw error;
  }
};

/**
 * Busca um produto espec√≠fico do estoque
 * @param {number} id - ID do produto
 * @returns {Promise<Object>} Dados do produto
 * @throws {Error} Se o produto n√£o for encontrado
 */
export const getProdutoEstoquePorId = async (id) => {
  try {
    const token = localStorage.getItem('token');

    if (!token) {
      throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.');
    }

    console.log('üîç Buscando produto:', id);

    const response = await api.get(`/api/Produtos/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log('‚úÖ Produto encontrado:', response.data);

    // Retorna no formato de estoque
    return {
      id: response.data.id,
      nome: response.data.nome,
      descricao: response.data.descricao || '',
      marca: response.data.marca || '',
      quantidade: response.data.quantidade || 0,
      valorUnitario: response.data.precoVenda || 0,
      localFisico: response.data.localizacao || '-',
      lote: response.data.lote || '-',
      status: calcularStatus(response.data.quantidade),
      categoria: response.data.categoria || '',
      fornecedor: response.data.fornecedor || '',
      sku: response.data.sku || '',
      ean: response.data.ean || ''
    };
  } catch (error) {
    console.error(`‚ùå Erro ao buscar produto ${id}:`, error);

    if (error.response) {
      console.error('Status:', error.response.status);

      if (error.response.status === 404) {
        throw new Error('Produto n√£o encontrado.');
      }
    }

    throw error;
  }
};

/**
 * Fun√ß√£o auxiliar para calcular o status do produto baseado na quantidade
 * @param {number} quantidade - Quantidade em estoque
 * @returns {string} Status: 'disponivel', 'estoque-baixo' ou 'sem-estoque'
 */
const calcularStatus = (quantidade) => {
  if (quantidade === 0) return 'sem-estoque';
  if (quantidade <= 5) return 'estoque-baixo';
  return 'disponivel';
};

/**
 * Fun√ß√£o auxiliar para validar dados de produto antes de enviar
 * @param {Object} produto - Dados do produto a validar
 * @returns {Object} Objeto com { valid: boolean, errors: Array<string> }
 */
export const validarDadosProduto = (produto) => {
  const errors = [];

  if (!produto.nome || produto.nome.trim() === '') {
    errors.push('Nome do produto √© obrigat√≥rio');
  }

  if (typeof produto.quantidade !== 'number' || produto.quantidade < 0) {
    errors.push('Quantidade deve ser um n√∫mero maior ou igual a zero');
  }

  if (typeof produto.valorUnitario !== 'number' || produto.valorUnitario <= 0) {
    errors.push('Valor unit√°rio deve ser um n√∫mero maior que zero');
  }

  if (produto.marca && produto.marca.length > 100) {
    errors.push('Marca n√£o pode ter mais de 100 caracteres');
  }

  if (produto.descricao && produto.descricao.length > 500) {
    errors.push('Descri√ß√£o n√£o pode ter mais de 500 caracteres');
  }

  return {
    valid: errors.length === 0,
    errors
  };
};

/**
 * Status v√°lidos para produtos do estoque
 */
export const STATUS_ESTOQUE = {
  DISPONIVEL: 'disponivel',
  ESTOQUE_BAIXO: 'estoque-baixo',
  SEM_ESTOQUE: 'sem-estoque'
};
